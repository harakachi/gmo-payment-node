// Generated by CoffeeScript 1.12.7
(function() {
  var SiteAPI, gmo, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require("./utils");

  gmo = require("./gmo_api");

  SiteAPI = (function(superClass) {
    extend(SiteAPI, superClass);

    function SiteAPI(options) {
      if (options == null) {
        options = {};
      }
      this.host = options.host;
      this.site_id = options.site_id;
      this.site_pass = options.site_pass;
      if (!(this.site_id && this.site_pass && this.host)) {
        throw new Error("ArgumentError: Initialize must receive a hash with site_id, site_pass and either host!");
      }
    }

    SiteAPI.prototype.saveMember = function(options, cb) {
      var name, required;
      name = "SaveMember.idPass";
      required = ["member_id"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.updateMember = function(options, cb) {
      var name, required;
      name = "UpdateMember.idPass";
      required = ["member_id"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.deleteMember = function(options, cb) {
      var name, required;
      name = "DeleteMember.idPass";
      required = ["member_id"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.searchMember = function(options, cb) {
      var name, required;
      name = "SearchMember.idPass";
      required = ["member_id"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.saveCard = function(options, cb) {
      var name, required;
      name = "SaveCard.idPass";
      required = ["member_id", "default_flag"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.deleteCard = function(options, cb) {
      var name, required;
      name = "DeleteCard.idPass";
      required = ["member_id", "card_seq"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.searchCard = function(options, cb) {
      var name, required;
      name = "SearchCard.idPass";
      required = ["member_id", "card_seq", "seq_mode"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.execTran = function(options, cb) {
      var name, required;
      name = "ExecTran.idPass";
      required = ["access_id", "access_pass", "order_id", "member_id", "card_seq"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    SiteAPI.prototype.apiCall = function(name, options, cb) {
      var extra_params, params;
      extra_params = {
        "site_id": this.site_id,
        "site_pass": this.site_pass
      };
      params = utils.extend(options, extra_params);
      return this.api(name, params, cb);
    };

    return SiteAPI;

  })(gmo.GMOAPI);

  module.exports = SiteAPI;

}).call(this);
