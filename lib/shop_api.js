// Generated by CoffeeScript 1.12.7
(function() {
  var ShopAPI, gmo, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  utils = require("./utils");

  gmo = require("./gmo_api");

  ShopAPI = (function(superClass) {
    extend(ShopAPI, superClass);

    function ShopAPI(options) {
      if (options == null) {
        options = {};
      }
      this.host = options.host;
      this.shop_id = options.shop_id;
      this.shop_pass = options.shop_pass;
      if (!(this.shop_id && this.shop_pass && this.host)) {
        throw new Error("ArgumentError: Initialize must receive a hash with shop_id, shop_pass and either host!");
      }
    }

    ShopAPI.prototype.entryTran = function(options, cb) {
      var name, required;
      name = "EntryTran.idPass";
      required = ["order_id", "job_cd"];
      if (options["job_cd"] && options["job_cd"] !== "CHECK") {
        required.push("amount");
      }
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.execTran = function(options, cb) {
      var name, required;
      name = "ExecTran.idPass";
      if (options["client_field_1"] || options["client_field_2"] || options["client_field_3"]) {
        options["client_field_flg"] = "1";
      } else {
        options["client_field_flg"] = "0";
      }
      options["device_category"] = "0";
      required = ["access_id", "access_pass", "order_id"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.saveCard = function(options, cb) {
      var name, required;
      name = "SaveCard.idPass";
      required = ["site_id", "site_pass", "member_id"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.deleteCard = function(options, cb) {
      var name, required;
      name = "DeleteCard.idPass";
      required = ["site_id", "site_pass", "member_id", "card_seq"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.searchCard = function(options, cb) {
      var name, required;
      name = "SearchCard.idPass";
      required = ["site_id", "site_pass", "member_id", "seq_mode"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.alterTran = function(options, cb) {
      var name, required;
      name = "AlterTran.idPass";
      required = ["access_id", "access_pass", "job_cd"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.changeTran = function(options, cb) {
      var name, required;
      name = "ChangeTran.idPass";
      required = ["access_id", "access_pass", "job_cd", "amount"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.searchTrade = function(options, cb) {
      var name, required;
      name = "SearchTrade.idPass";
      required = ["order_id"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.searchTradeMulti = function(options, cb) {
      var name, required;
      name = "SearchTradeMulti.idPass";
      required = ["order_id", "pay_type"];
      this.assertRequiredOptions(required, options);
      return this.apiCall(name, options, cb);
    };

    ShopAPI.prototype.apiCall = function(name, options, cb) {
      var extra_params, params;
      extra_params = {
        "shop_id": this.shop_id,
        "shop_pass": this.shop_pass
      };
      params = utils.extend(options, extra_params);
      return this.api(name, params, cb);
    };

    return ShopAPI;

  })(gmo.GMOAPI);

  module.exports = ShopAPI;

}).call(this);
